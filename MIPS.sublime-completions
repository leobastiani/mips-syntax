{
	"scope": "source.mips",

	"completions":
	[
		{ "trigger": "add_\t$d = $s + $t", "contents": "add \\$${1:dest}, \\$${2:src1}, \\$${3:src2} # \\$${1} = \\$${2} + \\$${3}" },
		{ "trigger": "subtract_\t$d = $s - $t", "contents": "sub \\$${1:dest}, \\$${2:src1}, \\$${3:src2} # \\$${1} = \\$${2} - \\$${3}" },
		{ "trigger": "and_\t$d = $s & $t", "contents": "and \\$${1:dest}, \\$${2:src1}, \\$${3:src2} # \\$${1} = \\$${2} & \\$${3}" },
		{ "trigger": "or_\t$d = $s | $t", "contents": "or \\$${1:dest}, \\$${2:src1}, \\$${3:src2} # \\$${1} = \\$${2} | \\$${3}" },
		{ "trigger": "nor_\t$d = ~ ($s | $t)", "contents": "nor \\$${1:dest}, \\$${2:src1}, \\$${3:src2} # \\$${1} = ~ (\\$${2} | \\$${3})" },
		{ "trigger": "move_\tadd $rt,$rs,$zero", "contents": "move \\$${1:dest}, \\$${2:src} # \\$${1} = \\$${2}" },
		{ "trigger": "clear_\tadd $rt,$zero,$zero", "contents": "clear \\$${1:dest} # \\$${1} = 0" },
		{ "trigger": "not_\tnor $rt,$rs,$zero", "contents": "not \\$${1:dest}, \\$${2:src} # \\$${1} = !\\$${2}" },
		{ "trigger": "multiply_\t$d = $s * $t", "contents": "mul \\$${1:dest}, \\$${2:src1}, \\$${3:src2} # \\$${1} = \\$${2} * \\$${3}" },
		{ "trigger": "add_unsigned\t$d = $s + $t", "contents": "addu \\$${1:dest}, \\$${2:src1}, \\$${3:src2} # \\$${1} = \\$${2} + \\$${3}" },
		{ "trigger": "addu_\t$d = $s + $t", "contents": "addu \\$${1:dest}, \\$${2:src1}, \\$${3:src2} # \\$${1} = \\$${2} + \\$${3}" },
		{ "trigger": "subtract_unsigned\t$d = $s - $t", "contents": "subu \\$${1:dest}, \\$${2:src1}, \\$${3:src2} # \\$${1} = \\$${2} - \\$${3}" },
		{ "trigger": "subu_\t$d = $s - $t", "contents": "subu \\$${1:dest}, \\$${2:src1}, \\$${3:src2} # \\$${1} = \\$${2} - \\$${3}" },
		{ "trigger": "add_immediate\t$t = $s + C (signed)", "contents": "addi \\$${1:t}, \\$${2:src1}, ${3:Label} # \\$${1} = \\$${2} + ${3}" },
		{ "trigger": "addi_\t$t = $s + C (signed)", "contents": "addi \\$${1:t}, \\$${2:src1}, ${3:Label} # \\$${1} = \\$${2} + ${3}" },
		{ "trigger": "add_immediate_unsigned\t$t = $s + C (unsigned)", "contents": "addiu \\$${1:t}, \\$${2:src1}, ${3:Label} # \\$${1} = \\$${2} + ${3}" },
		{ "trigger": "addiu_\t$t = $s + C (unsigned)", "contents": "addiu \\$${1:t}, \\$${2:src1}, ${3:Label} # \\$${1} = \\$${2} + ${3}" },
		{ "trigger": "load_word\t$t = Memory[$s + C]", "contents": "lw \\$${1:t}, ${2:N}(\\$${3:s}) # \\$${1} = Memory[\\$${2} + ${3}]" },
		{ "trigger": "lw_\t$t = Memory[$s + C]", "contents": "lw \\$${1:t}, ${2:N}(\\$${3:s}) # \\$${1} = Memory[\\$${2} + ${3}]" },
		{ "trigger": "load_halfword\t$t = Memory[$s + C] (signed)", "contents": "lh \\$${1:t}, ${2:N}(\\$${3:s}) # \\$${1} = Memory[\\$${2} + ${3}]" },
		{ "trigger": "lh_\t$t = Memory[$s + C] (signed)", "contents": "lh \\$${1:t}, ${2:N}(\\$${3:s}) # \\$${1} = Memory[\\$${2} + ${3}]" },
		{ "trigger": "load_halfword_unsigned\t$t = Memory[$s + C] (unsigned)", "contents": "lhu \\$${1:t}, ${2:N}(\\$${3:s}) # \\$${1} = Memory[\\$${2} + ${3}]" },
		{ "trigger": "lhu_\t$t = Memory[$s + C] (unsigned)", "contents": "lhu \\$${1:t}, ${2:N}(\\$${3:s}) # \\$${1} = Memory[\\$${2} + ${3}]" },
		{ "trigger": "load_byte\t$t = Memory[$s + C] (signed)", "contents": "lb \\$${1:t}, ${2:N}(\\$${3:s}) # \\$${1} = Memory[\\$${2} + ${3}]" },
		{ "trigger": "lb_\t$t = Memory[$s + C] (signed)", "contents": "lb \\$${1:t}, ${2:N}(\\$${3:s}) # \\$${1} = Memory[\\$${2} + ${3}]" },
		{ "trigger": "load_byte_unsigned\t$t = Memory[$s + C] (unsigned)", "contents": "lbu \\$${1:t}, ${2:N}(\\$${3:s}) # \\$${1} = Memory[\\$${2} + ${3}]" },
		{ "trigger": "lbu_\t$t = Memory[$s + C] (unsigned)", "contents": "lbu \\$${1:t}, ${2:N}(\\$${3:s}) # \\$${1} = Memory[\\$${2} + ${3}]" },
		{ "trigger": "store_word\tMemory[$s + C] = $t", "contents": "sw \\$${1:t}, ${2:N}(\\$${3:s}) # Memory[\\$${3} + ${2}] = \\$${1}" },
		{ "trigger": "sw_\tMemory[$s + C] = $t", "contents": "sw \\$${1:t}, ${2:N}(\\$${3:s}) # Memory[\\$${3} + ${2}] = \\$${1}" },
		{ "trigger": "store_half\tMemory[$s + C] = $t", "contents": "sh \\$${1:t}, ${2:N}(\\$${3:s}) # Memory[\\$${3} + ${2}] = \\$${1}" },
		{ "trigger": "sh_\tMemory[$s + C] = $t", "contents": "sh \\$${1:t}, ${2:N}(\\$${3:s}) # Memory[\\$${3} + ${2}] = \\$${1}" },
		{ "trigger": "store_byte\tMemory[$s + C] = $t", "contents": "sb \\$${1:t}, ${2:N}(\\$${3:s}) # Memory[\\$${3} + ${2}] = \\$${1}" },
		{ "trigger": "sb_\tMemory[$s + C] = $t", "contents": "sb \\$${1:t}, ${2:N}(\\$${3:s}) # Memory[\\$${3} + ${2}] = \\$${1}" },
		{ "trigger": "load_upper_immediate\t$t = C << 16", "contents": "lui \\$${1:t}, ${2:Label} # \\$${1} = ${2} << 16" },
		{ "trigger": "lui_\t$t = C << 16", "contents": "lui \\$${1:t}, ${2:Label} # \\$${1} = ${2} << 16" },
		{ "trigger": "move_from_high\t$d = HI", "contents": "mfhi \\$${1:dest} # \\$${1} = HI" },
		{ "trigger": "mfhi_\t$d = HI", "contents": "mfhi \\$${1:dest} # \\$${1} = HI" },
		{ "trigger": "move_from_low\t$d = LO", "contents": "mflo \\$${1:dest} # \\$${1} = LO" },
		{ "trigger": "mflo_\t$d = LO", "contents": "mflo \\$${1:dest} # \\$${1} = LO" },
		{ "trigger": "and_immediate\t$t = $s & C", "contents": "andi \\$${1:t}, \\$${2:src1}, ${3:Label} # \\$${1} = \\$${2} & ${3}" },
		{ "trigger": "andi_\t$t = $s & C", "contents": "andi \\$${1:t}, \\$${2:src1}, ${3:Label} # \\$${1} = \\$${2} & ${3}" },
		{ "trigger": "or_immediate\t$t = $s | C", "contents": "ori \\$${1:t}, \\$${2:src1}, ${3:Label} # \\$${1} = \\$${2} | ${3}" },
		{ "trigger": "ori_\t$t = $s | C", "contents": "ori \\$${1:t}, \\$${2:src1}, ${3:Label} # \\$${1} = \\$${2} | ${3}" },
		{ "trigger": "exclusive_or\t$d = $s ^ $t", "contents": "xor \\$${1:dest}, \\$${2:src1}, \\$${3:src2} # \\$${1} = \\$${2} ^ \\$${3}" },
		{ "trigger": "xor_\t$d = $s ^ $t", "contents": "xor \\$${1:dest}, \\$${2:src1}, \\$${3:src2} # \\$${1} = \\$${2} ^ \\$${3}" },
		{ "trigger": "set_on_less_than_unsigned\t$d = ($s < $t)", "contents": "sltu \\$${1:dest}, \\$${2:src1}, \\$${3:src2} # \\$${1} = \\$${2} < \\$${3}" },
		{ "trigger": "sltu_\t$d = ($s < $t)", "contents": "sltu \\$${1:dest}, \\$${2:src1}, \\$${3:src2} # \\$${1} = \\$${2} < \\$${3}" },
		{ "trigger": "set_on_less_than_immediate\t$t = ($s < C)", "contents": "slti \\$${1:t}, \\$${2:src1}, ${3:Label} # \\$${1} = \\$${2} < ${3}" },
		{ "trigger": "slti_\t$t = ($s < C)", "contents": "slti \\$${1:t}, \\$${2:src1}, ${3:Label} # \\$${1} = \\$${2} < ${3}" },
		{ "trigger": "shift_left_logical_immediate\t$d = $t << shamt", "contents": "sll \\$${1:dest}, \\$${2:t}, ${3:shamt} # \\$${1} = \\$${2} << ${3}" },
		{ "trigger": "sll_\t$d = $t << shamt", "contents": "sll \\$${1:dest}, \\$${2:t}, ${3:shamt} # \\$${1} = \\$${2} << ${3}" },
		{ "trigger": "shift_right_logical_immediate\t$d = $t >> shamt", "contents": "srl \\$${1:dest}, \\$${2:t}, ${3:shamt} # \\$${1} = \\$${2} >> ${3}" },
		{ "trigger": "srl_\t$d = $t >> shamt", "contents": "srl \\$${1:dest}, \\$${2:t}, ${3:shamt} # \\$${1} = \\$${2} >> ${3}" },
		{ "trigger": "shift_left_logical\t$d = $t << $s", "contents": "sllv \\$${1:dest}, \\$${2:t}, \\$${3:s} # \\$${1} = \\$${2} << \\$${3}" },
		{ "trigger": "sllv_\t$d = $t << $s", "contents": "sllv \\$${1:dest}, \\$${2:t}, \\$${3:s} # \\$${1} = \\$${2} << \\$${3}" },
		{ "trigger": "shift_right_logical\t$d = $t >> $s", "contents": "srlv \\$${1:dest}, \\$${2:t}, \\$${3:s} # \\$${1} = \\$${2} >> \\$${3}" },
		{ "trigger": "srlv_\t$d = $t >> $s", "contents": "srlv \\$${1:dest}, \\$${2:t}, \\$${3:s} # \\$${1} = \\$${2} >> \\$${3}" },
		{ "trigger": "float_add_single\t$x = $y + $z", "contents": "add.s \\$${1:x}, \\$${2:y}, \\$${3:z} # \\$${1} = \\$${2} + \\$${3}" },
		{ "trigger": "add_s_\t$x = $y + $z", "contents": "add.s \\$${1:x}, \\$${2:y}, \\$${3:z} # \\$${1} = \\$${2} + \\$${3}" },
		{ "trigger": "float_subtract_single\t$x = $y - $z", "contents": "sub.s \\$${1:x}, \\$${2:y}, \\$${3:z} # \\$${1} = \\$${2} - \\$${3}" },
		{ "trigger": "sub_s_\t$x = $y - $z", "contents": "sub.s \\$${1:x}, \\$${2:y}, \\$${3:z} # \\$${1} = \\$${2} - \\$${3}" },
		{ "trigger": "float_multiply_single\t$x = $y * $z", "contents": "mul.s \\$${1:x}, \\$${2:y}, \\$${3:z} # \\$${1} = \\$${2} * \\$${3}" },
		{ "trigger": "mul_s_\t$x = $y * $z", "contents": "mul.s \\$${1:x}, \\$${2:y}, \\$${3:z} # \\$${1} = \\$${2} * \\$${3}" },
		{ "trigger": "float_divide_single\t$x = $y / $z", "contents": "div.s \\$${1:x}, \\$${2:y}, \\$${3:z} # \\$${1} = \\$${2} / \\$${3}" },
		{ "trigger": "div_s_\t$x = $y / $z", "contents": "div.s \\$${1:x}, \\$${2:y}, \\$${3:z} # \\$${1} = \\$${2} / \\$${3}" },
		{ "trigger": "float_add_double\t$x = $y + $z", "contents": "add.d \\$${1:x}, \\$${2:y}, \\$${3:z} # \\$${1} = \\$${2} + \\$${3}" },
		{ "trigger": "add_d_\t$x = $y + $z", "contents": "add.d \\$${1:x}, \\$${2:y}, \\$${3:z} # \\$${1} = \\$${2} + \\$${3}" },
		{ "trigger": "float_subtract_double\t$x = $y - $z", "contents": "sub.d \\$${1:x}, \\$${2:y}, \\$${3:z} # \\$${1} = \\$${2} - \\$${3}" },
		{ "trigger": "sub_d_\t$x = $y - $z", "contents": "sub.d \\$${1:x}, \\$${2:y}, \\$${3:z} # \\$${1} = \\$${2} - \\$${3}" },
		{ "trigger": "float_multiply_double\t$x = $y * $z", "contents": "mul.d \\$${1:x}, \\$${2:y}, \\$${3:z} # \\$${1} = \\$${2} * \\$${3}" },
		{ "trigger": "mul_d_\t$x = $y * $z", "contents": "mul.d \\$${1:x}, \\$${2:y}, \\$${3:z} # \\$${1} = \\$${2} * \\$${3}" },
		{ "trigger": "float_divide_double\t$x = $y / $z", "contents": "div.d \\$${1:x}, \\$${2:y}, \\$${3:z} # \\$${1} = \\$${2} / \\$${3}" },
		{ "trigger": "div_d_\t$x = $y / $z", "contents": "div.d \\$${1:x}, \\$${2:y}, \\$${3:z} # \\$${1} = \\$${2} / \\$${3}" },
		{ "trigger": "load_immediate\tlui $rd,IMMED[31:16]; ori $rd,$rd,IMMED[15:0]", "contents": "li \\$${1:rd}, ${2:IMMED} # \\$${1} = ${2}" },
		{ "trigger": "li_\tlui $rd,IMMED[31:16]; ori $rd,$rd,IMMED[15:0]", "contents": "li \\$${1:rd}, ${2:IMMED} # \\$${1} = ${2}" },
		{ "trigger": "seq_\t$d = $s == $t", "contents": "seq \\$${1:dest}, \\$${2:src1}, \\$${3:src2} # \\$${1} = \\$${2} == \\$${3}" },
		{ "trigger": "sge_\t$d = $s >= $t", "contents": "sge \\$${1:dest}, \\$${2:src1}, \\$${3:src2} # \\$${1} = \\$${2} >= \\$${3}" },
		{ "trigger": "sgt_\t$d = $s  > $t", "contents": "sgt \\$${1:dest}, \\$${2:src1}, \\$${3:src2} # \\$${1} = \\$${2}  > \\$${3}" },
		{ "trigger": "sle_\t$d = $s <= $t", "contents": "sle \\$${1:dest}, \\$${2:src1}, \\$${3:src2} # \\$${1} = \\$${2} <= \\$${3}" },
		{ "trigger": "sne_\t$d = $s =< $t", "contents": "sne \\$${1:dest}, \\$${2:src1}, \\$${3:src2} # \\$${1} = \\$${2} =< \\$${3}" },
		{ "trigger": "set_on_less_than\t$d = $s  < $t", "contents": "slt \\$${1:dest}, \\$${2:src1}, \\$${3:src2} # \\$${1} = \\$${2}  < \\$${3}" },
		{ "trigger": "slt_\t$d = $s  < $t", "contents": "slt \\$${1:dest}, \\$${2:src1}, \\$${3:src2} # \\$${1} = \\$${2}  < \\$${3}" },
		{ "trigger": "branch_on_equal\tif ($s == $t) go to PC+4+4*", "contents": "beq \\$${1:s}, \\$${2:t}, ${3:Label} # \\$${1} == \\$${2} => ${3}" },
		{ "trigger": "beq_\tif ($s == $t) go to PC+4+4*", "contents": "beq \\$${1:s}, \\$${2:t}, ${3:Label} # \\$${1} == \\$${2} => ${3}" },
		{ "trigger": "branch_on_not_equal\tif ($s != $t) go to PC+4+4*C", "contents": "bne \\$${1:s}, \\$${2:t}, ${3:Label} # \\$${1} != \\$${2} => ${3}" },
		{ "trigger": "bne_\tif ($s != $t) go to PC+4+4*C", "contents": "bne \\$${1:s}, \\$${2:t}, ${3:Label} # \\$${1} != \\$${2} => ${3}" },
		{ "trigger": "branch_if_greater_than\tslt $at,$rt,$rs; bne $at,$zero,Label", "contents": "bgt \\$${1:rs}, \\$${2:rt}, ${3:Label} # \\$${1}  > \\$${2} => ${3}" },
		{ "trigger": "bgt_\tslt $at,$rt,$rs; bne $at,$zero,Label", "contents": "bgt \\$${1:rs}, \\$${2:rt}, ${3:Label} # \\$${1}  > \\$${2} => ${3}" },
		{ "trigger": "branch_if_less_than\tslt $at,$rs,$rt; bne $at,$zero,Label", "contents": "blt \\$${1:rs}, \\$${2:rt}, ${3:Label} # \\$${1}  < \\$${2} => ${3}" },
		{ "trigger": "blt_\tslt $at,$rs,$rt; bne $at,$zero,Label", "contents": "blt \\$${1:rs}, \\$${2:rt}, ${3:Label} # \\$${1}  < \\$${2} => ${3}" },
		{ "trigger": "branch_if_greater_than_or_equal\tslt $at,$rs,$rt; beq $at,$zero,Label", "contents": "bge \\$${1:rs}, \\$${2:rt}, ${3:Label} # \\$${1} >= \\$${2} => ${3}" },
		{ "trigger": "bge_\tslt $at,$rs,$rt; beq $at,$zero,Label", "contents": "bge \\$${1:rs}, \\$${2:rt}, ${3:Label} # \\$${1} >= \\$${2} => ${3}" },
		{ "trigger": "branch_if_less_than_or_equal\tslt $at,$rt,$rs; beq $at,$zero,Label", "contents": "ble \\$${1:rs}, \\$${2:rt}, ${3:Label} # \\$${1} <= \\$${2} => ${3}" },
		{ "trigger": "ble_\tslt $at,$rt,$rs; beq $at,$zero,Label", "contents": "ble \\$${1:rs}, \\$${2:rt}, ${3:Label} # \\$${1} <= \\$${2} => ${3}" },
		{ "trigger": "branch_if_greater_than_unsigned\tsltu $at,$rt,$rs; bne $at,$zero,Label", "contents": "bgtu \\$${1:rs}, \\$${2:rt}, ${3:Label} # \\$${1} >= \\$${2} => ${3}" },
		{ "trigger": "bgtu_\tsltu $at,$rt,$rs; bne $at,$zero,Label", "contents": "bgtu \\$${1:rs}, \\$${2:rt}, ${3:Label} # \\$${1} >= \\$${2} => ${3}" },
		{ "trigger": "branch_if_greater_than_zero\tslt $at,$zero,$rs; bne $at,$zero,Label", "contents": "bgtz \\$${1:rs}, ${2:Label} # \\$${1}  > 0 => ${2}" },
		{ "trigger": "bgtz_\tslt $at,$zero,$rs; bne $at,$zero,Label", "contents": "bgtz \\$${1:rs}, ${2:Label} # \\$${1}  > 0 => ${2}" },
		{ "trigger": "branch_if_less_than_zero\tbranch_if_less_than_zero", "contents": "bltz \\$${1:rs}, ${2:Label} # \\$${1}  < 0 => ${2}" },
		{ "trigger": "bltz_\tbranch_if_less_than_zero", "contents": "bltz \\$${1:rs}, ${2:Label} # \\$${1}  < 0 => ${2}" },
		{ "trigger": "branch_if_equal_to_zero\tbeq $rs,$zero,Label", "contents": "beqz \\$${1:rs}, ${2:Label} # \\$${1} == 0 => ${2}" },
		{ "trigger": "beqz_\tbeq $rs,$zero,Label", "contents": "beqz \\$${1:rs}, ${2:Label} # \\$${1} == 0 => ${2}" },
		{ "trigger": "divide_with_hi_lo\tLO=$s / $t; HI=$s % $t", "contents": "div \\$${1:s}, \\$${2:t} # LO=\\$${1} / \\$${2}; HI=\\$${1} % \\$${2}" },
		{ "trigger": "divide_unsigned_with_hi_lo\tLO=$s / $t; HI=$s % $t", "contents": "divu \\$${1:s}, \\$${2:t} # LO=\\$${1} / \\$${2}; HI=\\$${1} % \\$${2}" },
		{ "trigger": "divu_\tLO=$s / $t; HI=$s % $t", "contents": "divu \\$${1:s}, \\$${2:t} # LO=\\$${1} / \\$${2}; HI=\\$${1} % \\$${2}" },
		{ "trigger": "load_address\tlui $rd,LabelAddr[31:16]; ori $rd,$rd,LabelAddr[15:0]", "contents": "la \\$${1:rd}, ${2:LabelAddr} # *\\$${1} = &${2}" },
		{ "trigger": "la_\tlui $rd,LabelAddr[31:16]; ori $rd,$rd,LabelAddr[15:0]", "contents": "la \\$${1:rd}, ${2:LabelAddr} # *\\$${1} = &${2}" },
		{ "trigger": "divides_and_returns_quotient\tdiv $s,$t; mflo $d", "contents": "div \\$${1:dest}, \\$${2:src1}, \\$${3:src2} # \\$${1} = \\$${2} / \\$${3}" },
		{ "trigger": "div_\tdiv $s,$t; mflo $d", "contents": "div \\$${1:dest}, \\$${2:src1}, \\$${3:src2} # \\$${1} = \\$${2} / \\$${3}" },
		{ "trigger": "divides_and_returns_remainder\tdiv $s,$t; mfhi $d", "contents": "rem \\$${1:dest}, \\$${2:src1}, \\$${3:src2} # \\$${1} = \\$${2} % \\$${3}" },
		{ "trigger": "rem_\tdiv $s,$t; mfhi $d", "contents": "rem \\$${1:dest}, \\$${2:src1}, \\$${3:src2} # \\$${1} = \\$${2} % \\$${3}" },
		{ "trigger": "branch_and_link\tbgezal $zero,Label", "contents": "bal ${1:Label}" },
		{ "trigger": "bal_\tbgezal $zero,Label", "contents": "bal ${1:Label}" },
		{ "trigger": "branch_unconditionally\tbeq $zero,$zero,Label", "contents": "b ${1:Label}" },
		{ "trigger": "b_\tbeq $zero,$zero,Label", "contents": "b ${1:Label}" },
		{ "trigger": "branch_on_float_true\tif (cond == 1) go to PC+4+100", "contents": "bc${1:1}t ${2:Label}" },
		{ "trigger": "bcZt_\tif (cond == 1) go to PC+4+100", "contents": "bc${1:1}t ${2:Label}" },
		{ "trigger": "branch_on_float_false\tif (cond == 0) go to PC+4+100", "contents": "bc${1:1}f ${2:Label}" },
		{ "trigger": "bcZf_\tif (cond == 0) go to PC+4+100", "contents": "bc${1:1}f ${2:Label}" },
		{ "trigger": "jump_\tPC = PC+4[31:28] . C*", "contents": "j ${1:Label}" },
		{ "trigger": "multiply_with_hi_lo\tLO=(($s * $t)<<32)>>32; HI=($s * $t)>>32", "contents": "mult \\$${1:s}, \\$${2:t}" },
		{ "trigger": "mult_\tLO=(($s * $t)<<32)>>32; HI=($s * $t)>>32", "contents": "mult \\$${1:s}, \\$${2:t}" },
		{ "trigger": "multiply_unsigned_with_hi_lo\tLO=(($s * $t)<<32)>>32; HI=($s * $t)>>32;", "contents": "multu \\$${1:s}, \\$${2:t}" },
		{ "trigger": "multu_\tLO=(($s * $t)<<32)>>32; HI=($s * $t)>>32;", "contents": "multu \\$${1:s}, \\$${2:t}" },
		{ "trigger": "shift_right_arithmetic_immediate\tshifts shamt number of bits", "contents": "sra \\$${1:dest}, \\$${2:t}, ${3:shamt}" },
		{ "trigger": "sra_\tshifts shamt number of bits", "contents": "sra \\$${1:dest}, \\$${2:t}, ${3:shamt}" },
		{ "trigger": "shift_right_arithmetic\tshifts $s number of bits", "contents": "srav \\$${1:dest}, \\$${2:t}, \\$${3:s}" },
		{ "trigger": "srav_\tshifts $s number of bits", "contents": "srav \\$${1:dest}, \\$${2:t}, \\$${3:s}" },
		{ "trigger": "move_from_control_register\t$t = Coprocessor[Z].ControlRegister[$d", "contents": "mfc${1:1} \\$${2:t}, \\$${3:d}" },
		{ "trigger": "mfcZ_\t$t = Coprocessor[Z].ControlRegister[$d", "contents": "mfc${1:1} \\$${2:t}, \\$${3:d}" },
		{ "trigger": "move_to_control_register\tCoprocessor[Z].ControlRegister[$d] = $t", "contents": "mtc${1:1} \\$${2:t}, \\$${3:d}" },
		{ "trigger": "mtcZ_\tCoprocessor[Z].ControlRegister[$d] = $t", "contents": "mtc${1:1} \\$${2:t}, \\$${3:d}" },
		{ "trigger": "jump_register\tgoto address $s", "contents": "jr \\$${1:ra}" },
		{ "trigger": "jr_\tgoto address $s", "contents": "jr \\$${1:ra}" },
		{ "trigger": "jump_and_link\t$31 = PC + 4; PC = PC+4[31:28] . C*4", "contents": "jal ${1:Label}" },
		{ "trigger": "jal_\t$31 = PC + 4; PC = PC+4[31:28] . C*4", "contents": "jal ${1:Label}" },
		{ "trigger": "load_word_coprocessor\tCoprocessor[Z].DataRegister[$x] = Memory[$y + CONST", "contents": "lwc{$1:1} \\$${2:x}, ${3:CONST}(\\$${4:y})" },
		{ "trigger": "lwcZ_\tCoprocessor[Z].DataRegister[$x] = Memory[$y + CONST", "contents": "lwc{$1:1} \\$${2:x}, ${3:CONST}(\\$${4:y})" },
		{ "trigger": "store_word_coprocessor\tMemory[$y + CONST] = Coprocessor[Z].DataRegister[$x]", "contents": "swc{$1:1} \\$${2:x}, ${3:CONST}(\\$${4:y})" },
		{ "trigger": "swcZ_\tMemory[$y + CONST] = Coprocessor[Z].DataRegister[$x]", "contents": "swc{$1:1} \\$${2:x}, ${3:CONST}(\\$${4:y})" },
		{ "trigger": "abs_d_\tFloating Point Absolute Value Double", "contents": "abs.d \\$${1:dest}, \\$${2:src}" },
		{ "trigger": "abs_s_\tFloating Point Absolute Value Single", "contents": "abs.s \\$${1:dest}, \\$${2:src}" },
		{ "trigger": "float_compare_single\tif ($f2 < $f4) cond=1; else cond=0", "contents": "c.lt.s \\$${1:f2}, \\$${2:f4}" },
		{ "trigger": "c_lt_s_\tif ($f2 < $f4) cond=1; else cond=0", "contents": "c.lt.s \\$${1:f2}, \\$${2:f4}" },
		{ "trigger": "float_compare_double\tif ($f2 < $f4) cond=1; else cond=0", "contents": "c.lt.d \\$${1:f2}, \\$${2:f4}" },
		{ "trigger": "c_lt_d_\tif ($f2 < $f4) cond=1; else cond=0", "contents": "c.lt.d \\$${1:f2}, \\$${2:f4}" },
		{ "trigger": "c_eq_d_\tCompare Equal Double", "contents": "c.eq.d \\$${1:src1}, \\$${2:src2}" },
		{ "trigger": "c_eq_s_\tCompare Equal Single", "contents": "c.eq.s \\$${1:src1}, \\$${2:src2}" },
		{ "trigger": "c_le_d_\tCompare Less Than Equal Double", "contents": "c.le.d \\$${1:src1}, \\$${2:src2}" },
		{ "trigger": "c_le_s_\tCompare Less Than Equal Single", "contents": "c.le.s \\$${1:src1}, \\$${2:src2}" },
		{ "trigger": "cvt_d_s_\tConvert Single to Double", "contents": "cvt.d.s \\$${1:dest}, \\$${2:src}" },
		{ "trigger": "cvt_d_w_\tConvert Integer to Double", "contents": "cvt.d.w \\$${1:dest}, \\$${2:src}" },
		{ "trigger": "cvt_s_d_\tConvert Double to Single", "contents": "cvt.s.d \\$${1:dest}, \\$${2:src}" },
		{ "trigger": "cvt_s_w_\tConvert Integer to Single", "contents": "cvt.s.w \\$${1:dest}, \\$${2:src}" },
		{ "trigger": "cvt_w_d_\tConvert Double to Integer", "contents": "cvt.w.d \\$${1:dest}, \\$${2:src}" },
		{ "trigger": "cvt_w_s_\tConvert Single to Integer", "contents": "cvt.w.s \\$${1:dest}, \\$${2:src}" },
		{ "trigger": "l_d_\tLoad Floating Point Double", "contents": "l.d \\$${1:dest}, ${2:address}" },
		{ "trigger": "l_s_\tLoad Floating Point Single", "contents": "l.s \\$${1:dest}, ${2:address}" },
		{ "trigger": "mov_d_\tMove Floating Point Double", "contents": "mov.d \\$${1:dest}, \\$${2:src}" },
		{ "trigger": "mov_s_\tMove Floating Point Single", "contents": "mov.s \\$${1:dest}, \\$${2:src}" },
		{ "trigger": "neg_d_\tNegate Double", "contents": "neg.d \\$${1:dest}, \\$${2:src}" },
		{ "trigger": "neg_s_\tNegate Single", "contents": "neg.s \\$${1:dest}, \\$${2:src}" },
		{ "trigger": "s_d_\tStore Floating Point Double", "contents": "s.d \\$${1:dest}, ${2:address}" },
		{ "trigger": "s_s_\tStore Floating Point Single", "contents": "s.s \\$${1:dest}, ${2:address}" },
	]
}